package example.com.zztest.Bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ARTICLE_BEAN".
*/
public class ArticleBeanDao extends AbstractDao<ArticleBean, Long> {

    public static final String TABLENAME = "ARTICLE_BEAN";

    /**
     * Properties of entity ArticleBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TextPath = new Property(0, String.class, "textPath", false, "TEXT_PATH");
        public final static Property LrcPath = new Property(1, String.class, "lrcPath", false, "LRC_PATH");
        public final static Property Channel = new Property(2, String.class, "channel", false, "CHANNEL");
        public final static Property AudioPath = new Property(3, String.class, "audioPath", false, "AUDIO_PATH");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property TranslationUrl = new Property(5, String.class, "translationUrl", false, "TRANSLATION_URL");
        public final static Property LrcUrl = new Property(6, String.class, "lrcUrl", false, "LRC_URL");
        public final static Property AudioUrl = new Property(7, String.class, "audioUrl", false, "AUDIO_URL");
        public final static Property IsMyFavorite = new Property(8, boolean.class, "isMyFavorite", false, "IS_MY_FAVORITE");
        public final static Property IsDownLoaded = new Property(9, boolean.class, "isDownLoaded", false, "IS_DOWN_LOADED");
        public final static Property TranslationPath = new Property(10, String.class, "translationPath", false, "TRANSLATION_PATH");
        public final static Property Title = new Property(11, String.class, "title", false, "TITLE");
        public final static Property Url = new Property(12, String.class, "url", false, "URL");
        public final static Property Id = new Property(13, Long.class, "id", true, "_id");
        public final static Property DateL = new Property(14, long.class, "dateL", false, "DATE_L");
    };


    public ArticleBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ArticleBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ARTICLE_BEAN\" (" + //
                "\"TEXT_PATH\" TEXT," + // 0: textPath
                "\"LRC_PATH\" TEXT," + // 1: lrcPath
                "\"CHANNEL\" TEXT," + // 2: channel
                "\"AUDIO_PATH\" TEXT," + // 3: audioPath
                "\"CONTENT\" TEXT," + // 4: content
                "\"TRANSLATION_URL\" TEXT," + // 5: translationUrl
                "\"LRC_URL\" TEXT," + // 6: lrcUrl
                "\"AUDIO_URL\" TEXT," + // 7: audioUrl
                "\"IS_MY_FAVORITE\" INTEGER NOT NULL ," + // 8: isMyFavorite
                "\"IS_DOWN_LOADED\" INTEGER NOT NULL ," + // 9: isDownLoaded
                "\"TRANSLATION_PATH\" TEXT," + // 10: translationPath
                "\"TITLE\" TEXT UNIQUE ," + // 11: title
                "\"URL\" TEXT UNIQUE ," + // 12: url
                "\"_id\" INTEGER PRIMARY KEY ," + // 13: id
                "\"DATE_L\" INTEGER NOT NULL );"); // 14: dateL
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ARTICLE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ArticleBean entity) {
        stmt.clearBindings();
 
        String textPath = entity.getTextPath();
        if (textPath != null) {
            stmt.bindString(1, textPath);
        }
 
        String lrcPath = entity.getLrcPath();
        if (lrcPath != null) {
            stmt.bindString(2, lrcPath);
        }
 
        String channel = entity.getChannel();
        if (channel != null) {
            stmt.bindString(3, channel);
        }
 
        String audioPath = entity.getAudioPath();
        if (audioPath != null) {
            stmt.bindString(4, audioPath);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String translationUrl = entity.getTranslationUrl();
        if (translationUrl != null) {
            stmt.bindString(6, translationUrl);
        }
 
        String lrcUrl = entity.getLrcUrl();
        if (lrcUrl != null) {
            stmt.bindString(7, lrcUrl);
        }
 
        String audioUrl = entity.getAudioUrl();
        if (audioUrl != null) {
            stmt.bindString(8, audioUrl);
        }
        stmt.bindLong(9, entity.getIsMyFavorite() ? 1L: 0L);
        stmt.bindLong(10, entity.getIsDownLoaded() ? 1L: 0L);
 
        String translationPath = entity.getTranslationPath();
        if (translationPath != null) {
            stmt.bindString(11, translationPath);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(12, title);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(13, url);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(14, id);
        }
        stmt.bindLong(15, entity.getDateL());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ArticleBean entity) {
        stmt.clearBindings();
 
        String textPath = entity.getTextPath();
        if (textPath != null) {
            stmt.bindString(1, textPath);
        }
 
        String lrcPath = entity.getLrcPath();
        if (lrcPath != null) {
            stmt.bindString(2, lrcPath);
        }
 
        String channel = entity.getChannel();
        if (channel != null) {
            stmt.bindString(3, channel);
        }
 
        String audioPath = entity.getAudioPath();
        if (audioPath != null) {
            stmt.bindString(4, audioPath);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String translationUrl = entity.getTranslationUrl();
        if (translationUrl != null) {
            stmt.bindString(6, translationUrl);
        }
 
        String lrcUrl = entity.getLrcUrl();
        if (lrcUrl != null) {
            stmt.bindString(7, lrcUrl);
        }
 
        String audioUrl = entity.getAudioUrl();
        if (audioUrl != null) {
            stmt.bindString(8, audioUrl);
        }
        stmt.bindLong(9, entity.getIsMyFavorite() ? 1L: 0L);
        stmt.bindLong(10, entity.getIsDownLoaded() ? 1L: 0L);
 
        String translationPath = entity.getTranslationPath();
        if (translationPath != null) {
            stmt.bindString(11, translationPath);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(12, title);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(13, url);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(14, id);
        }
        stmt.bindLong(15, entity.getDateL());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13);
    }    

    @Override
    public ArticleBean readEntity(Cursor cursor, int offset) {
        ArticleBean entity = new ArticleBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // textPath
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // lrcPath
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // channel
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // audioPath
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // translationUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lrcUrl
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // audioUrl
            cursor.getShort(offset + 8) != 0, // isMyFavorite
            cursor.getShort(offset + 9) != 0, // isDownLoaded
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // translationPath
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // title
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // url
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13), // id
            cursor.getLong(offset + 14) // dateL
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ArticleBean entity, int offset) {
        entity.setTextPath(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLrcPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChannel(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAudioPath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTranslationUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLrcUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAudioUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsMyFavorite(cursor.getShort(offset + 8) != 0);
        entity.setIsDownLoaded(cursor.getShort(offset + 9) != 0);
        entity.setTranslationPath(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTitle(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUrl(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setId(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setDateL(cursor.getLong(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ArticleBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ArticleBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
